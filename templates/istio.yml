# Use a specific image
global:
  # tag: release-1.1-latest-daily

  k8sIngress:
    enabled: true
    enableHttps: true

  controlPlanSecurityEnabled: true
  disablePolicyChecks: false
  policyCheckFailOpen: false
  enableTracing: false

  mtls:
    enabled: true

  outboundTrafficPolicy:
    mode: ALLOW_ANY

sidecarInjectorWebhook:
  enabled: true
  # If true, webhook or istioctl injector will rewrite PodSpec for liveness
  # health check to redirect request to sidecar. This makes liveness check work
  # even when mTLS is enabled.
  rewriteAppHTTPProbe: true

gateways:
  istio-ingressgateway:
    sds:
      enabled: true
    serviceAnnotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: 'true'

kiali:
  enabled: true
  contextPath: /
  ingress:
    enabled: true
    ## Used to create an Ingress record.
    hosts:
      - istio-kiali.innovation.cloud.statcan.ca
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: "istio"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: kiali-tls
      #   hosts:
      #     - kiali.local

  dashboard:
    grafanaURL: https://istio-grafana.innovation.cloud.statcan.ca

grafana:
  enabled: true
  contextPath: /
  ingress:
    enabled: true
    ## Used to create an Ingress record.
    hosts:
      - istio-grafana.innovation.cloud.statcan.ca
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      kubernetes.io/ingress.class: "istio"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: grafana-tls
      #   hosts:
      #     - grafana.local
      
prometheus:
  enabled: true
